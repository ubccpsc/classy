# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
        # Specify service dependencies here if necessary
        # CircleCI maintains a library of pre-built images
        # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: cimg/node:18.12
      - image: circleci/mongo:5.0

    working_directory: ~/project

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: "Setup encrypted .env variable per Classy fork (chooses default env.enc when not set)"
          command: |
            echo 'export ENV_ENC_FILE="${ENCRYPT_ENV:-env}"' >> $BASH_ENV # Redirect ENCRYPT_ENV into $BASH_ENV

     # openssl aes-256-cbc -e -iter 100000 -md sha512 -in ../.env -out env.enc -k $ENVKEY
      - run:
            command: cd .circleci && openssl aes-256-cbc -d -iter 100000 -md sha512 -in "$ENV_ENC_FILE.enc" -out ../.env -k $ENVKEY
            name: Configuring .env
            when: always

      - run:
            command: ./helper-scripts/bootstrap-plugin.sh
            name: Bootstraps default plugin for tests

      - run: yarn install --ignore-engines

      - run:
            command: cd packages/common && yarn install --ignore-engines
            name: Preparing common

      - run:
            command: cd packages/autotest && yarn install --ignore-engines
            name: Preparing autotest

      - run:
            command: cd packages/portal/backend && mkdir -p ssl/ && yarn install --ignore-engines
            name: Preparing backend

      - save_cache:
          paths:
            - node_modules
#            - packages/common/node_modules
#            - packages/portal-backend/node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Generate self-signed certs
          command: |
            set -x
            SSL_PATH=~/project/packages/portal/backend/ssl
            mkdir -p $SSL_PATH && openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout $SSL_PATH/privkey.pem -out $SSL_PATH/fullchain.pem -subj "/C=GB/ST=Vancouver/L=Vancouver/O=Global Security/OU=IT Department/CN=test.com"
          when: always

      - run:
            command: cd plugins/default && yarn run build
            name: Building plugin
            when: always

      - run:
            command: cd packages/common && ../../node_modules/typescript/bin/tsc
            name: Building common
            when: always

      - run:
            command: cd packages/portal/backend && ../../../node_modules/typescript/bin/tsc
            name: Building backend
            when: always

      - run:
            command: cd packages/portal/frontend && ../../../node_modules/typescript/bin/tsc && yarn webpack
            name: Building frontend and bundle with Webpack
            when: always

      # statically validate the frontend (this is the best we can do as there are no automated UI tests yet)
#      - run:
#            command: cd packages/portal/frontend && ../../../node_modules/typescript/bin/tsc && ../../../node_modules/webpack/bin/webpack.js
#            name: Building frontend
#            when: always

      - run:
            command: cd packages/autotest && ../../node_modules/typescript/bin/tsc
            name: Building autotest
            when: always

      - run:
            command: yarn run lint
            name: Linting project
            when: always

      - run:
            command: git config --global user.email "CI@test.com" && git config --global user.name "CI Test Name"
            name: Configure local git
            when: on_success

     ## WORKS
      - run:
            command: |
                      set -e
                      cd packages/portal/backend
                      ./node_modules/.bin/nyc --reporter html --report-dir ../../../testOutput/backend/coverage --reporter=text-lcov yarn run testCI
            name: Running backend tests
            environment:
              MOCHA_FILE: testOutput/backend/test/test-results.xml
            when: on_success

      - run:
            command: mkdir -p testOutput/backend/test/ && ./node_modules/xunit-viewer/bin/xunit-viewer --results=packages/portal/backend/testOutput/backend/test/test-results.xml --output=testOutput/backend/test/index.html
            name: Converting backend test results to HTML
            when: on_success

      # Makes docker.sock available to AutoTest docker endpoint tests
      - setup_remote_docker:
            version: 20.10.18

      - run:
            command: |
                      set -e
                      cd packages/autotest
                      yarn coverCI
            name: Running autotest tests
            environment:
              MOCHA_FILE: testOutput/autotest/test/test-results.xml
            when: on_success

      - run:
            command: mkdir -p testOutput/autotest/test/ && ./node_modules/xunit-viewer/bin/xunit-viewer --results=packages/autotest/testOutput/autotest/test/test-results.xml --output=testOutput/autotest/test/index.html
            name: Converting autotest test results to HTML
            when: on_success

      - run:
            command: cd packages/portal/backend && yarn coveralls
            name: Running backend coveralls
            when: on_success

# coveralls doesn't integrate coverage
# so this overwrites the backend coverage (which we care about more)
# this is disabled and shouldn't be enabled until this is fixed
#      - run:
#            command: cd packages/autotest && yarn coveralls
#            name: Running autotest coveralls
#            when: always

      - run:
            command: cd packages/portal/backend && yarn codecov
            name: Running backend codecov
            when: on_success

      - store_test_results:
          path: testOutput

      - store_artifacts:
          path: testOutput

      - run:
            command: rm .env && rm packages/portal/backend/ssl/fullchain.pem && rm packages/portal/backend/ssl/privkey.pem
            name: Cleaning up
            when: always

  build_run_stop:
    machine:
      image: ubuntu-2004:202201-02
    working_directory: ~/project

    environment:
      TEST_LOGS: /home/circleci/project/test-logs

    steps:
      - checkout

      - run:
          name: "Setup encrypted .env variable per Classy fork (chooses default env.enc when not set)"
          command: |
            set -x
            echo 'export ENV_ENC_FILE="${ENCRYPT_ENV:-env}"' >> $BASH_ENV # Redirect ENCRYPT_ENV into $BASH_ENV

     # openssl aes-256-cbc -e -iter 100000 -md sha512 -in ../.env -out env.enc -k $ENVKEY
      - run:
          name: Configuring .env
          command: cd .circleci && openssl aes-256-cbc -d -iter 100000 -md sha512 -in "$ENV_ENC_FILE.enc" -out ../.env -k $ENVKEY
          when: always

     # CircleCI runs in root, which is 0 for UID & GID. Must do after file unencrypted.
      - run:
          name: "Export UID and GID to configuration file"
          command: |
            set -x
            echo -e "GID=0\nUID=0\n" >> .env

     # SSLs need to be set for Portal container or else "volume name is too short" Docker Portal create error
      - run:
          name: "Export SSL CERT and SSL KEY paths"
          command: |
            set -x
            SSL_PATH=~/project/packages/portal/backend/ssl
            echo -e "HOST_SSL_CERT_PATH=$SSL_PATH/fullchain.pem\nHOST_SSL_KEY_PATH=$SSL_PATH/privkey.pem\n" >> .env

      - run:
          name: Generate self-signed certs
          command: |
            set -x
            SSL_PATH=~/project/packages/portal/backend/ssl
            mkdir -p $SSL_PATH && openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout $SSL_PATH/privkey.pem -out $SSL_PATH/fullchain.pem -subj "/C=GB/ST=Vancouver/L=Vancouver/O=Global Security/OU=IT Department/CN=test.com"
          when: always

      - run:
          name: Create mount path for MongoDB
          command: sudo mkdir -p /var/opt/classy/db

      - run:
          name: Create paths for artifact collections
          command: |
            set -x
            sudo mkdir -p ${TEST_LOGS}
            cd ${TEST_LOGS} && sudo touch portal-front-end-test.log portal-back-end-test.log autotest-test.log docker-stdout.log
            sudo chmod 777 -R ${TEST_LOGS}

      - run:
          name: Build and start container to verify it is working
          command: |
            set -x
            docker-compose up -d 2>&1 | tee -a ${TEST_LOGS}/docker-stdout.log

      - run:
          name: Shut down containers
          command: docker-compose down 2>&1 | tee -a ${TEST_LOGS}/docker-stdout.log

      - run:
          name: Cleaning up Docker containers and images
          command: docker system prune -af 2>&1 | tee -a ${TEST_LOGS}/docker-stdout.log
          when: always

      - store_artifacts:
          path: /home/circleci/project/test-logs
          destination: raw-test-output

      - run:
          name: Cleaning up SSLs and Environment
          command: rm .env && rm ~/project/packages/portal/backend/ssl/fullchain.pem && rm ~/project/packages/portal/backend/ssl/privkey.pem
          when: always

      - run:
          name: Cleaning up artifacts
          command: |
            set -x
            sudo rm -rf ${TEST_LOGS}
          when: always
workflows:
  version: 2
  ci_tests:
    jobs:
      - build
    # Uncomment if you want to run the Docker-compose workflow in regular pushes
    #   - build_run_stop
  nightly:
    triggers:
      - schedule:
          # 5am PST time in UTC
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      # Can add any jobs you want to run at 5am here
      - build_run_stop
