#####
##### Sample Classy Configuration
#####
##### NEVER NEVER NEVER commit your .env to version control.
##### GitHub monitors these and if it sees tokens in the repo it will
##### automatically invalidate them and your course _will_ break.
#####

#####
#####
##### Core Settings
#####
#####

## Name of the org (e.g., cs310, cs340, sdmm, classytest)
NAME=cs310

## GitHub org identifier for the course (e.g., CS310-2017Jan, classytest)
## This org must have a team called admin and a team called staff manually
## created inside it.
ORG=CS310-2017Jan

## GitHub org identifier for the test organization (you probably do not want to change this)
ORGTEST=classytest

## Course name for the test instance (you probably do not want to change this)
NAMETEST=classytest

## The external name used for the Classy service (used by GitHub WebHooks)
## Must start with https:// and should not have a trailing slash
PUBLICHOSTNAME=https://classy.cs.ubc.ca

## Set the logging verbosity: TRACE (default), INFO, WARN, ERROR, TEST, NONE
LOG_LEVEL=INFO

#####
#####
##### Host config for portal/backend; no trailing slash
##### https://localhost is usually used for testing
#####
#####


## URL (no trailing slash) for Classy backend; different than HOSTNAME as this is the
## internal name (e.g., as Classy is addressed to other local services)
BACKEND_URL=https://localhost
BACKEND_PORT=3000

## Full path to fullchain.pem (Can be self-signed for localhost testing)
SSL_CERT_PATH=/DEVPATH/classy/packages/portal/backend/ssl/fullchain.pem
## Full path to privkey.pem (Can be self-signed for localhost testing)
SSL_KEY_PATH=/DEVPATH/classy/packages/portal/backend/ssl/privkey.pem


#####
#####
##### Mongo Configuration
#####
#####

## For testing, you can spin up a basic mongo instance (w/o authentication) using:
## `docker run -p 27017:27017 mongo`
## Specify the DB_URL as below to connect:
# DB_URL=mongodb://localhost:27017


## To spin up a mongo instance with authentication, specify a username and password below.
## Notes:
## - you must specify the username and password twice (once for the MONGO_INITDB_ROOT_* and once in the DB_URL)
## - the username/password will only be applied on the **FIRST** launch of the db service (otherwise they have no effect)
## - when deploying with Docker Compose, replace _localhost_ with the value of CONTAINER_NAME_DATABASE (set below).
## - the DB_URL must be URI encoded if it contains special characters
MONGO_INITDB_ROOT_USERNAME=mongoadmin
MONGO_INITDB_ROOT_PASSWORD=strongpasswd
DB_URL=mongodb://mongoadmin:strongpasswd@localhost:27017/?authMechanism=DEFAULT

#####
#####
##### GitHub Configuration
#####
#####

## GitHub API host (no trailing slash). This is because the API host is often different than the web host.
## For public github it will be: https://api.github.com
## For hosted github it will be: https://https://api.github.ugrad.cs.ubc.ca (or possibly https://github.ugrad.cs.ubc.ca/api/v3)
GH_API=https://api.github.com

## GitHub Web root (no trailing slash)
## For public GitHub it will be https://github.com
GH_HOST=https://github.com

## The name of the GitHub bot account the students will call
## You must have access to this account because it needs to be
## added to both the admin and staff teams so it can admin and
## comment on repos. Do not include the @ in the username.
## The bot needs to be added to your org with admin privileges
## e.g., for public GitHub here: https://github.com/orgs/ORGNAME/people
GH_BOT_USERNAME=ubcbot

## A GitHub token so the bot can use the GitHub API without going
## through authentication. It is important that this token be well
## protected as without it you can lose programmatic access to student
## projects. The format should be:
## GH_BOT_TOKEN=token d4951x....
## (yes the word token is required)
## If you want to use ubcbot, contact Reid Holmes for a token.

GH_BOT_TOKEN=token d4951x...


## Before you can authenticate against GitHub you will need to create
## two OAuth applications on the org; e.g., for public GitHub you can
## do this here: https://github.com/organizations/ORGNAME/settings/applications
##
## For Testing, create one with an Authorization callback URL similar to:
## https://localhost:3000/authCallback?orgName=ORGNAME
## For Production, create another with your production backend host:
## e.g., https://sdmm.cs.ubc.ca/authCallback?orgName=ORGNAME
##
## The Client ID and Client Secret for the OAuth profile (testing or prod)
## you intend to use should be included below. These _must_ be protected.

GH_CLIENT_ID=f42b49hut...
GH_CLIENT_SECRET=1337secretTokenCharsHere...


#####
#####
#####
##### AutoTest Settings
#####
#####
#####

## When using docker-compose, an entry is added to the hosts file for each
## dependent service. Thus, we just need to specify the service name in the URL.
AUTOTEST_URL=http://localhost

## AutoTest instance port.
AUTOTEST_PORT=11333

## Password used for Classy backend to make sure results being posted are from
## valid grader instances.
AUTOTEST_SECRET=longRandomString

## Whether the bot will postback results to commits (usually false when debugging)
AUTOTEST_POSTBACK=false

## The WebSocket port the grading container uses to communicate with the Grader service
GRADER_PORT_SOCK=7777

## Where the Grader service should store temporary files (e.g. a student repo)
GRADER_WORKSPACE=/var/tmp/test/

## Where the Grader service should store persistent data (e.g. container execution logs)
## This path is on the HOST machine (and is the mount point for GRADER_PERSIST_DIR inside the container)
GRADER_HOST_DIR=./data/runs

## Where the Grader service should store persistent data (e.g. container execution logs)
## This path is INSIDE the container (and is bound to GRADER_HOST_DIR on the host machine)
GRADER_PERSIST_DIR=/DEVPATH/classy/packages/autotest/test/data

## Seconds until container is forcefully killed
GRADER_TIMEOUT=300

## URL (no trailing slash) for grader
GRADER_URL=http://localhost

## The port the grading container uses to listen for http requests
GRADER_PORT=7654


## The uid for the (non-root) user that should run the containers (if following deploy instructions, should be the uid
## for the classy user). Also used by the grader service to configure permissions on directories shared between grader
## and the grading container.
UID=993

## [SDMM/310 Only] Port that the geo-location service should listen on
## MUST BE SET TO 11316 (this is baked into the service's dockerfile)
GEO_PORT=11316

## [SDMM/310 Only] Port that the reference UI service should listen on.
## MUST BE SET TO 11315 (this is baked into the service's dockerfile)
UI_PORT=11315


#####
##### Deployment Only
#####


## The name docker-compose will prefix to every container
COMPOSE_PROJECT_NAME=classy

## The location of the SSL certificate and private key. NOTE: you MUST CHANGE these values after certbot updates the
## the certificate (you should just need to increment the appended version by one). You will also need to restart any
## affected services since the old version of the cert will still be mounted in the container.
## This is not a great solution but Let's Encrypt uses a symlink from the "live" directory and there is no way for
## Docker Compose to resolve it.
## The full path to the certificate and private key on the Docker host
## Currently, we are using Let's Encrypt so the cert and key are versioned; these values must be changed after each renewal
HOST_SSL_CERT_PATH=/etc/letsencrypt/archive/classy.cs.ubc.ca/fullchain1.pem
HOST_SSL_KEY_PATH=/etc/letsencrypt/archive/classy.cs.ubc.ca/privkey1.pem

## GitHub token with read access to clone repositories in the org for the particular course offering
COURSE_GH_ORG_TOKEN=asb865...


## [310/SDMM Only] A single hosts entry used to resolve the hostname of the server running geolocation.
## This is required since the grading container will not be able to make DNS requests.
## Format hostname:IP
HOSTS_ALLOW=classy.cs.ubc.ca:142.103.6.191


## Container names. These are used in the nginx conf to pass requests to the correct service. They are also the names
## used to reference the service when using docker commands (e.g. docker logs CONTAINER_NAME).
CONTAINER_NAME_AUTOTEST=autotest
CONTAINER_NAME_DATABASE=db
CONTAINER_NAME_GRADER=grader
CONTAINER_NAME_PORTAL=portal
CONTAINER_NAME_ROUTER=proxy
CONTAINER_NAME_GEO=geo
CONTAINER_NAME_UI=ref_ui

## Grading container network name. Student grading containers are attached to this network.
GRADE_NET_NAME=grading_net

## Specifies the mode under which the reference implementation should operate.
## Currently supports values 'd1' and 'd2'.
## Affects the reference UI and the grading container.
PLATFORM=d1
